[
    {
        "id": 1,
        "title": "The Evolutionary Journey of Building My Auto Detailing Business Software",
        "summary": "A deep dive into the thought process, technical challenges, and insights gained while developing a unique management software for auto detailing businesses.",
        "body": "<article><p>A year ago, I set sail in the turbulent waters of entrepreneurship, embarking on a venture to build a business management software tailored for auto detailing businesses. The journey began with the crafting of a user experience (UX) design, where my team and I relentlessly designed, tested, and refined our concept until satisfaction dawned.</p><h2>Setting the Scope with an MVP</h2><p>In these initial stages, my brother and I collaborated to bring the MVP to life, using PHP and Livewire. But alas, upon reaching the crossroads of Stripe integration and other libraries, we found ourselves ensnared in complexity. The building process stumbled, prompting a strategic pause for redesign.</p><h2>Pivoting the Tech Stack</h2><p>Here, I steered the ship towards the shores of React for the frontend and Golang for the backend. Despite my limited Golang knowledge and the backend’s Laravel-like structure's confusion, the newfound obsession with architectural soundness guided the course. This obsession coupled with a richer understanding of React illuminated the path towards a more structured and clear coding approach.</p><h2>The Great Microservices Debate</h2><p>Amidst the coding odyssey, my friend Dan and I engaged in a friendly duel of wits, battling over microservices and monolithic applications. Our shared love for simplicity and clear separation of concerns illuminated the way, leading me to the shores of service-oriented monolithic structure for my backend.</p><h2>Implementing the Structure</h2><p>In this newfound land of structure, I laid out my routes and handlers, implementing them as Get requests, prioritizing the completion of the frontend. This strategic decision paved the path for a smoother frontend development, allowing for a robust structure upon which to build and refine.</p><h2>Learning and Implementing CICD</h2><p>As the expedition progressed, I plunged into the depths of CICD, unearthing treasures of knowledge, and ultimately embracing the simplicity of a virtual machine from Digital Ocean, coupled with Docker Compose and GitHub actions. This transformative discovery empowered me to build projects end-to-end, magically witnessing live changes and envisioning the swift implementation of a database to usher in client onboarding.</p><h2>Reflecting on the Journey</h2><p>As I stand on the deck, gazing at the horizon, the entire odyssey unravels as a splendid tapestry of learning, challenge, and growth. Despite the tempests of managing a small, distributed team and the initial architectural unknowns, the beacon of confidence now guides my path. I peer into the abyss, acknowledging the boundless expanse of the unknown, yet armed with a clearer vision and a fortified resilience to navigate the endless ocean of software development.</p><h2>Conclusion</h2><p>In the words of the timeless sage, Albert Einstein, \"Everything should be made as simple as possible, but no simpler\". As I continue to sail, these words echo as the North Star, steering the helm towards simplicity, clarity, and the relentless pursuit of building good software. The voyage presses on, as the golden hues of dawn paint the boundless canvas of possibility. And so, amidst the whispers of the wind and the rhythm of the waves, I embark onward, riding the tide towards the boundless horizon of software development, ready to meet the unfolding adventures with a heart full of anticipation, and a spirit fortified with newfound wisdom and clarity.</p></article>",
        "created_at": "2023-09-25T16:16:00Z"
    },
    {
        "id": 2,
        "title": "Building JayPlus: An Obsession with Perfecting Auto Detailing Software",
        "summary": "My journey in building a specialized business management software for auto detailing, learning and iterating, and understanding software architecture.",
        "body": "<article><p>When my cousin Damon showcased his UX design talents on a portfolio project, little did we know it would become our stepping stone to JayPlus - a transformative business management software for auto detailing. With me deep into the operations at a car detailing shop, the inefficiencies I saw were impossible to ignore. So, driven by passion and what we learned from the book 'Continuous Discovery Habits', we decided to make the software a reality.</p><h2>From Inception to Development</h2><p>This wasn't my first rodeo with entrepreneurship. But it's crucial to mention that JayPlus wasn't just a buzzword-filled project; it was a determined endeavor. Juggling between my commitments, I outlined the vision to my software engineer brother. While initially built with PHP and Livewire, we faced our set of challenges - especially with Stripe integration. With my limited Go knowledge, my brother developed the initial Go backend. However, the Laravel-like structure left me perplexed.</p><h2>Diving Deep into Architecture</h2><p>My fixation on software architecture deepened. I wanted to rewrite, to perfect. In this phase, the 'Clean Architecture' book by Robert Martin became my guiding star. Still, decisions were tough. While I was intrigued by microservices, a debate with my friend Dan changed my perspective. We both admired the elegance of simplicity, resonating with Einstein's \"Everything should be made as simple as possible, but no simpler\" and Dan's \"Handle complexity, see simplicity.\"</p><h3>A New Approach</h3><p>I yearned for modularity, domain-driven design, and a monolith's efficiency. The outcome? A service-oriented monolithic structure. The backend tree, ranging from cmd to utils, was a testament to my persistence and clarity.<pre>. \n├── Dockerfile \n...</pre></p><h2>Road to Completion</h2><p>With frontend challenges tackled, interactions between front and back were smoother with dummy data. The real fun was in setting up CICD. From Kubernetes to Docker, I finally settled with a VM from Digital Ocean, Docker Compose, and GitHub actions. The experience was magical - instant live updates, almost ready to onboard clients!</p><h2>Reflections</h2><p>This journey was an educational rollercoaster. Managing a distributed team, facing architectural dilemmas, and realizing the depth of software craftsmanship, I've grown tremendously. One thing's clear: while I've come a long way, the road to perfection is endless. I'm fortunate to have people who challenge me, proving that either I still have much to learn or I'm surrounded by geniuses. Probably, a bit of both.</p></article>",
        "created_at": "2023-09-25T19:15:00Z"
    },
    {
        "id": 3,
        "title": "Riding the Waves of Building a Business Management Software",
        "summary": "Starting something from scratch is always an adventurous challenge. As the challenge unfolds, the adventure lies in the pivots, decisions, and the constant refining of one's approach.",
        "body": "<article><p>Starting something from scratch is always an adventurous challenge. As the challenge unfolds, the adventure lies in the pivots, decisions, and the constant refining of one's approach. It's this same journey that led me down the road of developing a business management software for auto detailing businesses. And oh, what a ride it's been!</p><h3>Setting the Scope with an MVP</h3><p>It began a year ago when I envisioned a system to streamline the inefficiencies I noticed while working at a car detailing shop. It wasn't my first entrepreneurial adventure, so I knew I wanted more than just buzzwords and theoretical perfection. I needed something tangible, functional, and effective.</p><p>Originally, this was just supposed to be a portfolio project for my Cousin Damon, whom I was mentoring in his journey into UX design. But the moment I saw the sheer quality and potential of his designs, I knew we were onto something bigger.</p><p>We dove headfirst into it. The initial goal was clear: create a Minimum Viable Product (MVP). This MVP would serve as our litmus test, helping us gauge the viability of our business model. If things looked good, we'd scale and implement the other features waiting in the wings.</p><h3>Pivoting the Tech Stack</h3><p>To bring this MVP to life, I looped in my brother, a skilled software engineer. We began with a PHP and Livewire combination. However, we hit a snag integrating Stripe and other essential libraries. As we pondered our next move, I realized that I wanted this project to be a learning avenue for juniors I trained. Tools like Laravel didn't seem enticing, so a pivot was in order.</p><p>Having some familiarity with React and Go, these became our tools of choice. Yet, the initial backend felt more like a Laravel app than a Go one. Confusing, right? That's when I decided a fresh start was necessary. This fresh start also birthed my obsession with software architecture, prompting me to devour Robert Martin's \"Clean Architecture.\"</p><h3>The Great Microservices Debate</h3><p>Around this time, my friend Dan and I found ourselves amidst heated debates. Microservices were all the rage, but were they right for our project? As an engineer, I can be incredibly stubborn. However, I pride myself on being open to change, especially when convincingly argued. And that's just what Dan did. With quotes like \"Handle complexity, see simplicity\" and Einstein's classic \"Everything should be made as simple as possible, but no simpler,\" we pondered our direction.</p><p>I realized I wasn't chasing the microservices hype but was keen on a clear separation of concerns. After evaluating our needs and potential market size, it became evident that a monolithic approach was more suitable. Still, I yearned for modularity and domain-driven design, leading to our unique service-oriented monolithic structure.</p><h3>Implementing the Structure</h3><p>For those interested in the nitty-gritty, here's a glimpse into the backend structure we crafted:</p><ul style='list-style-type:none;'><li>. (root)</li><li>├── Dockerfile</li><li>├── cmd</li><ul style='list-style-type:none;'><li>└── app</li><ul style='list-style-type:none;'><li>├── main.go</li><li>└── ...</li></ul></ul><li>├── config</li><ul style='list-style-type:none;'><li>├── AppConfig.go</li><li>├── AuthConfig.go</li><li>└── ...</li></ul><li>├── contracts</li><ul style='list-style-type:none;'><li>├── app</li><ul style='list-style-type:none;'><li>├── interfaces.go</li><li>├── types.go</li><li>└── ...</li></ul><li>└── ...</li></ul><li>├── internal</li><ul style='list-style-type:none;'><li>├── app</li><ul style='list-style-type:none;'><li>├── app.go</li><li>└── ...</li></ul></ul><ul style='list-style-type:none;'><li>├── app</li><ul style='list-style-type:none;'><li>├── app.go</li><li>└── ...</li></ul><li>└── ...</li></ul><li>├── models</li><ul style='list-style-type:none;'><li>├── Booking.go</li><li>├── Payment.go</li><li>└── ...</li></ul><li>└── utils</li><ul style='list-style-type:none;'><li>└── json.go</li></ul><p>Every route and handler found its place, and I decided to lay everything out with Get requests initially. This allowed me to focus on refining the frontend, ensuring smooth interaction with the backend. The foundation was now set, with only the database and core logic implementation pending.</p><h3>Learning and Implementing CICD</h3><p>This project was also my foray into the realms of CI/CD. True to form, I plunged into the deep end, exploring tools and technologies far and wide. Kubernetes, Docker, cloud services – you name it. Yet, in the end, I realized simplicity often trumps complexity. A straightforward VM from Digital Ocean coupled with Docker Compose and GitHub actions hit the sweet spot. For the first time in years, I witnessed the magic of end-to-end project creation. The thrill of seeing live changes in mere minutes was nothing short of exhilarating.</p><h3>Reflecting on the Journey</h3><p>Looking back, this journey has been filled with learning curves, debates, decisions, and endless refining. There were challenges aplenty, from managing a distributed team with varying commitments to grappling with architectural dilemmas. But the fruits of this labor are evident. I now see applications in a clearer light, with renewed confidence and a deeper understanding of the intricacies involved.</p><p>In the end, isn't that what journeys are all about? Growth, learning, and pushing forward, one wave at a time.</p></article>",
        "created_at": "2023-09-25T20:15:00Z"
    }
]

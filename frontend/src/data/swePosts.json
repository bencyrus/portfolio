[
    {
        "id": 1,
        "title": "The Evolutionary Journey of Building My Auto Detailing Business Software",
        "summary": "A deep dive into the thought process, technical challenges, and insights gained while developing a unique management software for auto detailing businesses.",
        "body": "<article><p>A year ago, I set sail in the turbulent waters of entrepreneurship, embarking on a venture to build a business management software tailored for auto detailing businesses. The journey began with the crafting of a user experience (UX) design, where my team and I relentlessly designed, tested, and refined our concept until satisfaction dawned.</p><h2>Setting the Scope with an MVP</h2><p>In these initial stages, my brother and I collaborated to bring the MVP to life, using PHP and Livewire. But alas, upon reaching the crossroads of Stripe integration and other libraries, we found ourselves ensnared in complexity. The building process stumbled, prompting a strategic pause for redesign.</p><h2>Pivoting the Tech Stack</h2><p>Here, I steered the ship towards the shores of React for the frontend and Golang for the backend. Despite my limited Golang knowledge and the backend’s Laravel-like structure's confusion, the newfound obsession with architectural soundness guided the course. This obsession coupled with a richer understanding of React illuminated the path towards a more structured and clear coding approach.</p><h2>The Great Microservices Debate</h2><p>Amidst the coding odyssey, my friend Dan and I engaged in a friendly duel of wits, battling over microservices and monolithic applications. Our shared love for simplicity and clear separation of concerns illuminated the way, leading me to the shores of service-oriented monolithic structure for my backend.</p><h2>Implementing the Structure</h2><p>In this newfound land of structure, I laid out my routes and handlers, implementing them as Get requests, prioritizing the completion of the frontend. This strategic decision paved the path for a smoother frontend development, allowing for a robust structure upon which to build and refine.</p><h2>Learning and Implementing CICD</h2><p>As the expedition progressed, I plunged into the depths of CICD, unearthing treasures of knowledge, and ultimately embracing the simplicity of a virtual machine from Digital Ocean, coupled with Docker Compose and GitHub actions. This transformative discovery empowered me to build projects end-to-end, magically witnessing live changes and envisioning the swift implementation of a database to usher in client onboarding.</p><h2>Reflecting on the Journey</h2><p>As I stand on the deck, gazing at the horizon, the entire odyssey unravels as a splendid tapestry of learning, challenge, and growth. Despite the tempests of managing a small, distributed team and the initial architectural unknowns, the beacon of confidence now guides my path. I peer into the abyss, acknowledging the boundless expanse of the unknown, yet armed with a clearer vision and a fortified resilience to navigate the endless ocean of software development.</p><h2>Conclusion</h2><p>In the words of the timeless sage, Albert Einstein, \"Everything should be made as simple as possible, but no simpler\". As I continue to sail, these words echo as the North Star, steering the helm towards simplicity, clarity, and the relentless pursuit of building good software. The voyage presses on, as the golden hues of dawn paint the boundless canvas of possibility. And so, amidst the whispers of the wind and the rhythm of the waves, I embark onward, riding the tide towards the boundless horizon of software development, ready to meet the unfolding adventures with a heart full of anticipation, and a spirit fortified with newfound wisdom and clarity.</p></article>"
    },
    {
        "id": 2,
        "title": "When is TDD a good idea?",
        "summary": "TDD is a good idea when you have a clear idea of what you want to build, but you don't know how to build it.",
        "body": "TDD is a good idea when you have a clear idea of what you want to build, but you don't know how to build it.\n"
    },
    {
        "id": 3,
        "title": "My experience setting up a ruby on rails app",
        "summary": "15 months ago when I got an interview with a company named Yuhu, I decided to learn Ruby on Rails to impress them.",
        "body": "15 months ago when I got an interview with a company named Yuhu, I decided to learn Ruby on Rails to impress them.\n"
    },
    {
        "id": 4,
        "title": "How to use the command line",
        "summary": "The command line is a tool that allows you to interact with your computer using text commands. It is a very powerful tool that can be used to automate tasks.",
        "body": "They want to write about testing. I say, “No, I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.” They say, “You have to write about testing.” I say, “I don’t want to write about testing.”"
    },
    {
        "id": 5,
        "title": "Journey of Building JayPlus: A Business Management Software for Auto Detailing",
        "summary": "An overview of the JayPlus software, its goals, features, and the technologies utilized in its development.",
        "body": "<article><p>JayPlus is a specialized business management software designed for auto detailing businesses. As the creator, I've embarked on a journey to make it a comprehensive suite of tools to facilitate administrative and operational activities in this domain.</p><h2>Introduction</h2><h3>General Overview</h3><p>JayPlus aims to be the go-to software for auto detailing businesses. Its core objectives include streamlining operational procedures, maximizing profit margins, and providing a foundation for data-driven managerial decisions.</p><h2>Primary Goals</h2><ul><li>Streamlining operational procedures</li><li>Maximizing profit margins</li><li>Facilitating data-driven managerial decisions</li></ul><h2>Features in Development</h2><ul><li>Booking and booking management functionality (primary focus for v1.0)</li><li>Business analytics and reporting (planned for future releases)</li><li>Workforce management tools (planned for future releases)</li><li>Marketing resource kits (planned for future releases)</li></ul><h2>Version 1.0 Development Plan</h2><h3>Technical Architecture</h3><strong>Backend:</strong> A service-oriented monolithic architecture.<br><strong>Frontend:</strong> Independently deployed client applications.<h4>Frontend Development</h4><p>The frontend of JayPlus is built using React and TypeScript. There are two main applications: The Admin Interface (focused on booking management functionalities) and the Customer Interface (primarily centered around service scheduling capabilities).</p><strong>Technologies Utilized:</strong><ul><li>React</li><li>TypeScript</li><li>React Router DOM</li></ul><h4>Backend Development</h4><p>For the backend, Go is the programming language of choice. The system is designed in a way that segregates functionalities into domain-specific packages. The primary database in use is Postgres.</p><p>For version 1.0, our attention is concentrated on:</p><ul>    <li>Booking functionalities</li>    <li>User Authentication</li></ul><strong>Technologies Utilized:</strong><ul><li>Go Programming Language</li><li>Postgres Database</li></ul><p>The system also integrates REST API endpoints for communication between the frontend and backend, and uses JWT for secure authorization and authentication.</p><h3>Features</h3><strong>Customer Booking:</strong> This feature enables customers to schedule their services in a three-step process. Post selection, they are redirected to the payment page. After successful payment, they receive a receipt with all relevant details.<br><br><strong>Booking Process:</strong> The booking process is comprehensive, with clear options for vehicle type, service type, and date-time selection.<br><br><strong>Admin Panel:</strong> Designed for easy navigation, the admin panel allows business administrators to manage bookings efficiently. This interface has been optimized for all devices, ensuring a seamless experience regardless of the screen size.<h3>Frontend App Structure</h3><p>The frontend application, crafted using React, follows a clean and organized structure. It's divided into two main sections: CustomerApp and AdminApp. Each section has its set of functionalities and routes, ensuring an optimized user experience.</p><h3>Backend App Overview</h3><p>The backend of JayPlus is modular and domain-driven. It ensures efficient data management and smooth operations. The application integrates several services, including core services like the App Service, DB Service, and Auth Service. It also includes business logic services such as the Booking Service and Payment Service, and utility services like the SMS Service.</p><p>In conclusion, building JayPlus has been a learning journey. As the software evolves, the vision remains clear: to offer the best administrative and operational tools for auto detailing businesses. Stay tuned for more updates as we progress towards future releases!</p></article>"
    }
]
